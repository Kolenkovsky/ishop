<?php
defined('SHOP') or exit('Access denied');
/*Создадим промежуточный класс Base также абстрактный,т.к. обьект этого класса нам не нужен.
 Этот промежуточный класс нужен для того чтобы когда мы будем писать контроллеры для индекс или 
 каталог контролеров не повторять код для вывода статичных блоков(шапка левый бар,футер и т.д.)
 эти блоки хоть и общие но некоторое различие всеже есть,например в шапке сайта,каждая страница имеет
 свои мета-теги и мета-описание*/
 abstract class Base extends Base_Controller {
    
    //Опишем свойства которые нам будут необходимы для работы с этим классом
    protected $ob_m;/*Здесь будем хранить обьект модели нашего сайта чтобы в каждом классе страниц нашего сайта
    не связыватся с моделью,мы один раз пропишем его а те классы унаследуют этот обьект*/
    protected $title;//Здесь мы будем хранить заголовок страниицы
    
    protected $style;/*Здесь будем хранить стили которые мы автоматичски загружаем,только тут уже будет
    прописан путь к нашему сайту, к шаблону и к папке с нашими стилими*/
    protected $script;//То же и для скриптов 
    
    protected $header;/*Тут будем хранить сгенирированный нашим шаблонизатором-методом render шаблон шапки нашего сайта с уже добавленными
    туда переменными -названием четырех типов товаров товаров взятых из базы данных,которые будут вызываться методом,который 
    опишем уже в контролерах страниц*/
    protected $header_menu;//Здесь будем хранить наше верхнее меню
    
    protected $content;
    
    protected $left_bar;
    
    protected $right_bar;//Здесь будет хранится сгенерированная правая часть
    
    protected $footer;
    
    protected $need_right_side = TRUE;//Здесь страница для каталога,по умолчанию TRUE,если будет FALSE то
    //блок новосте выводить не надо когда мы будем создавать контролер каталога мы это свойство присвоим FALSE
    protected $news;//Здесь будет хранится массив выбранный в базе данных
    
    protected $pages;//Здесь будет храниться наши ссылки на страницы левае меню
    
    protected $catalog_type;//Тут храним типы товаров
    
    protected $catalog_brands;//Тут будет хранится масив брендов для лефт-бара
    
    protected $keywords,$description;//Эти два свойства для хранения ключев.слов и описани мета
        
    /*Теперь опишем методы input и output, а так как по теории ООП если методы имеют одинаковое название
    то будет выполняться тот метод в классе которого мы работаем сейчас, а чтобы вызвать метод из роди-
    тельского класса надо обратиться к нему с помощью ключевого слова parents. поэтому мы тут их опишем, а 
    потом из Index_Controller или из Catalog_Controller обратимся к ним чтобы отдельно не описывать их
    в каждом контроллере отдельно*/
    protected function input() {
        //Оформим заголовок -обратимся к нашему свойству
        $this->title = "ishop | ";
        
        /*Теперь когда получили название,нам необходимо подключить стили и скрипты,которые лежат в 
        массивах styles и scripts и свормировать свойства style и script,поэтому мы циклом пройдемся 
        по масивам styles и scripts и сформируем путь к стилям и скриптам*/
        foreach($this->styles as $style) {//передаем ему свойство $this->styles как переменную $style
            /*Формируем свойство style используя константы из файла config.php*/
            $this->style[] = SITE_URL.VIEW.$style;//Две константы и переменная style из цикла
                 
        }
        
        //Теперь то же для скриптов
        foreach($this->scripts as $script) {
            $this->script[] = SITE_URL.VIEW.$script;    
        }
        //Дальше тут нам надо будет связываться с моделью это опишем когда будет модель и получать
        //obg_model
        $this->ob_m = Model::get_instance();
        
        //Теперь обратимся к свойству $news и сохраним туда отработку метода get_news нашей модели
        $this->news = $this->ob_m->get_news();
        
        //Теперь обращаемся к методу get_pages
        $this->pages = $this->ob_m->get_pages();
        
        //Теперь вызываем метод get_catalog_type
        $this->catalog_type = $this->ob_m->get_catalog_type();
        
        //Теперь обратимся к обькту Model и его методу get_catalog_brands
        $this->catalog_brands = $this->ob_m->get_catalog_brands();
        
        //Теперь для меню шапки обратимся к методу get_header_menu
        $this->header_menu = $this->ob_m->get_header_menu();               
    }
    
    protected function output() {
        /*Этот метод должен выводить блоки которые общие для всех страниц - это left_bar,right_bar
        footer, а классы которые будут выводить непосредственно страницы сайта,они будут генерировать
        шапку сайта и контент*/
        /*После того как индексный файл сгенирировал шапку и контент он вызывает родительский output
        и мы продолжаем формировать блоки дальше*/
        $this->left_bar = $this->render(VIEW.'left_bar',array(
                                                              'pages' => $this->pages,
                                                              'types' => $this->catalog_type,/*передаем шаблонизатору,циклом по которому будет проходиться,массив переменных в шаблон*/
                                                              'brands' => $this->catalog_brands                            
                                                             ));
        
        //Теперь правый блок,только с проверкой надо ли выводить правый блок т.е.nttd_right_side в TRUE или FALSE
        if($this->need_right_side) {
           /*Передаем нашему шаблонизатору render первым параметром -шаблон,а вторым массив с выбраными новостями*/ 
           $this->right_bar = $this->render(VIEW.'right_bar',array(
                                                                  'news' => $this->news 
                                                                  )); 
        }
        
        //Теперь футер
        $this->footer = $this->render(VIEW.'footer',array(
                                                          'pages'=> $this->pages
                                                         ));
                                                         
        //генерирум шапку вызываем наш шаблонизатор(метод render)и передаем ему путь к 
        //файлу header,php,вторым парам.передаем массив на автозагр.стилей и скриптов
        $this->header = $this->render(VIEW.'header',array(
                                                          'styles' => $this->style,
                                                          'scripts' => $this->script,
                                                          'header_menu' => $this->header_menu,//Это получаем из Base
                                                          'title' => $this->title, // мы его сформировали,теперь чтобы выводилось в заголовке
                                                          'keywords' => $this->keywords,
                                                          'description' => $this->description
                                                         ));
        
        /*Теперь нам осталось собрать все сгенерируемые кусочки в одно целое и собрать страницу
        а этим у нас занимается файл index.php, поэто создаем переменную $page и передаем шаблонизатору*/
        $page = $this->render(VIEW.'index',
                                         array(
                                              'header' => $this->header,
                                              'left_bar' => $this->left_bar,
                                              'content' =>$this->content,//Центральная часть страницы
                                              'right_bar' =>$this->right_bar,
                                              'footer' => $this->footer
                                              )
                              );
         return $page;                                   
    }    
 }

?>